-- Александра Михайлова, Computer Science Center, направление Data Mining.
-- Задание 6, задача 1.

type Graph = (Int, Int -> Int -> Bool)

-- Написать функцию diameter :: Graph -> Int,
-- которая вычисляет диаметр связного неориентированного графа -
-- наибольшее из минимальных расстояний между всеми парами вершин.

-- Идея: используем динамический алгоритм Флойда-Уоршелла для нахождения (минимальных) расстояний между всеми парами вершин графа.

-- Реализация алгоритма.

-- Максимальное допустимое число, назовём его бесконечностью.
infinity :: Int
infinity = 2^14 - 1

-- Стартовое заполнение матрицы расстояний. Заполняем только ячейки, соответствующие соседним вершинам. В остальные ячейки пишем "бесконечность".
startMatrix :: Graph -> [[Int]]
startMatrix (n, f) = map (\i -> map (\j -> if f i j then 1 else infinity) [1..n]) [1..n]

-- Следующие три функции - реализация собственно алгоритма Флойда-Уоршелла.

-- Функция для внешнего цикла.
excycle :: [[Int]] -> [[Int]]
excycle m = foldr matrix m [(length m)-1, (length m)-2..0]

-- Проход по матрице.
matrix :: Int -> [[Int]] -> [[Int]]
matrix l m = map (row m l) [0..(length m)-1]

-- Заполнение одной строки.
row :: [[Int]] -> Int -> Int -> [Int]
row m l i = zipWith (\a b -> min a (b + (m !! i !! l))) (m !! i) (m !! l)

-- Диаметр в нашем случае (связный неориентированный граф) - максимальный элемент заполненной с помощью алгоритма Флойда-Уоршелла матрицы.
diameter :: Graph -> Int
diameter = maximum . (map maximum) . excycle . startMatrix
