-- Александра Михайлова, Computer Science Center, направление Data Mining.
-- Задание 4, задача 2.

-- Бесконечная упорядоченная последовательность целых чисел без повторений составлена из всех квадратов,
-- кубов и факториалов натуральных чисел.
-- Написать программу для вычисления n-го члена этой последовательности.

import Data.List

-- Основная функция.
-- Аргумент - натуральное число n.
-- Результат - n-й член требуемой последовательности.
-- Идея: строим три бесконечных списка (квадраты, кубы и факториалы),
-- сливаем их с помощью функции merge3.
-- Далее извлекаем n-й элемент из получившегося списка.
-- Нумерация элементов списка начинается с 0.
nmember :: Int -> Integer
nmember n = (merge3 (powers 2) (powers 3) facts) !! n

-- Вспомогательные функции.

-- Последовательность натуральных чисел, начиная с числа n.
numbersFrom :: Integer -> [Integer]
numbersFrom n = n : (numbersFrom (n + 1))

-- Последовательность a-ых степеней натуральных чисел.
powers :: Integer -> [Integer]
powers a = map (^a) (numbersFrom 1)

-- Факториал.
fac :: Integer -> Integer
fac 0 = 1
fac n = n * (fac (n - 1))

-- Последовательность факториалов натуральных чисел.
facts :: [Integer]
facts = map fac (numbersFrom 1)

-- Слияние двух бесконечных (возрастающих) списков.
merge2 :: Ord a => [a] -> [a] -> [a]
merge2 (x1:ls1) (x2:ls2) | x1 == x2  = x1 : (merge2 ls1 ls2)
	| x1 < x2   = x1 : (merge2 ls1 (x2:ls2))
	| otherwise = x2 : (merge2 (x1:ls1) ls2)

-- Слияние трёх бесконечных (возрастающих) списков.
merge3 :: Ord a => [a] -> [a] -> [a] -> [a]
merge3 ls1 ls2 ls3 = merge2 ls1 (merge2 ls2 ls3)

-- Тесты.
test = (nmember 0, nmember 1, nmember 5, nmember 100)

