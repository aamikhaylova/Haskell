-- Александра Михайлова, Computer Science Center, направление Data Mining.
-- Задание 4, задача 4.

-- Бесконечная матрица содержит все натуральные числа в "диагональном" порядке:
-- [[ 1,  2,  4,  7, 11, ...],
--  [ 3,  5,  8, 12, 17, ...],
--  [ 6,  9, 13, 18, 24, ...], 
--  [10, 14, 19, 25, 32, ...],
--  ...]
-- Построить заданную матрицу (написать соответствующее выражение) и написать функцию, вычисляющую сумму ее элементов,
-- лежащих в левом верхнем квадрате размером N x N.
-- Функция должна получать N в качестве аргумента и использовать построенный список списков
-- в качестве глобального для этой функции объекта.

import Data.List

-- Функия для построения матрицы.
buildMatrix :: [[Integer]]
-- Заметим, что (i + 1)-ая строка матрицы = i-я строка + 1 без первого элемента, то есть tail (i-я строка + 1).
-- Таким образом, если мы построим первую строку, то мы сможем построить и всю матрицу
-- с помощью стандартной функции iterate.
-- Заметим: tail (1-ая строка) = 1-ая строка без первого элемента = 1-я строка + ряд натуральных чисел
-- (имеется ввиду поэлементное сложение двух последовательностей).
-- Таким образом, мы можем построить первую строку
-- (используя вспомогательную функцию numbersFrom для построения натурального ряда).
-- Определим вспомогательную функцию для построения первой строки.
buildFirstRow :: [Integer]
buildFirstRow = 1 : (zipWith (+) buildFirstRow (numbersFrom 1))
-- Теперь можем построить и всю матрицу.
buildMatrix = iterate ((map (+1)) . tail) buildFirstRow

-- Функция для вычисления суммы элементов в куске n x n.
-- Идея: берём n первых строк, из каждой выбираем по n первых столбцов,
-- отображаем каждую строку в сумму её элементов, далее складываем элементы получившегося списка.
sumCorner :: Int -> Integer
sumCorner 0 = 0
sumCorner n = (sum . map (sum . (take n))) (take n buildMatrix)

-- Вспомогательная функция.
-- Последовательность натуральных чисел, начиная с числа n.
numbersFrom :: Integer -> [Integer]
numbersFrom n = n : (numbersFrom (n + 1))

-- Тесты.
test = (sumCorner 2, sumCorner 3, sumCorner 100)
